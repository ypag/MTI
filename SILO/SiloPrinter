#include <Servo.h>
Servo myservo;
int servopin=9;

/*............speaker part starts.....*/

#include "pitches.h"
int melody[] = {
  NOTE_C4,NOTE_G3, NOTE_A3,NOTE_G3, NOTE_G3,0}; // NOTE_B3, NOTE_C4};

// note durations: 4 = quarter note, 8 = eighth note, etc.:
int noteDurations[] = {
 4, 8, 8, 4, 4};//4,4,4 };
 /*..............speaker part ends..........*/
 
 /*............................printer part starts....*/
 #include "SoftwareSerial.h"

#include "Adafruit_Thermal.h"

#include <avr/pgmspace.h>

int printer_RX_Pin = 5;  //  brown wire
int printer_TX_Pin = 6;  //  red wire

Adafruit_Thermal printer(printer_RX_Pin, printer_TX_Pin);
/*......................printer part.............*/


const int ledPin = 13;      // led connected to digital pin 13
const int knockSensor = A0; // the piezo is connected to analog pin 0
const int threshold = 100;  // threshold value to decide when the detected sound is a knock or not


// these variables will change:
int sensorReading = 0;      // variable to store the value read from the sensor pin
int ledState = LOW;         // variable used to store the last LED status, to toggle the light

void setup() {
  myservo.attach(servopin);
  pinMode(ledPin, OUTPUT); // declare the ledPin as as OUTPUT
  Serial.begin(9600);
   pinMode(7, OUTPUT); digitalWrite(7, LOW); // To also work w/IoTP printer
}

void loop() {
  // read the sensor and store it in the variable sensorReading:
  sensorReading = analogRead(knockSensor);
  myservo.write(90);

  // if the sensor reading is greater than the threshold:
  if (sensorReading >= threshold) {
    // toggle the status of the ledPin:
    myservo.write(60);
    delay(2000);
    
    Blink(500);
    
    {  
   printer.begin();
  
   printer.setSize('L'); 
   printer.doubleHeightOn();
    printer.justify('C');
    printer.underlineOn(); 
  printer.println("SILO SAYS ");
  printer.underlineOff();
   printer.doubleHeightOff();
   
    printer.setSize('S');
     printer.justify('C');
  printer.println("Dear Human,");
   
    printer.setSize('S');
    // printer.inverseOn();
    printer.println("May the force be with you");
    // printer.inverseOff();
  printer.feed(2);
   
   printer.sleep();      // Tell printer to sleep
  printer.wake();       // MUST call wake() before printing again, even if reset
  printer.setDefault(); // Restore printer to defaults
}

    
     for (int thisNote = 0; thisNote < 5; thisNote++) {
     int noteDuration = 1000/noteDurations[thisNote];
     tone(8, melody[thisNote],noteDuration);

    // to distinguish the notes, set a minimum time between them.
    // the note's duration + 30% seems to work well:
    int pauseBetweenNotes = noteDuration * 1.30;
    delay(pauseBetweenNotes);
    // stop the tone playing:
    noTone(8);
  }
   
    // send the string "Knock!" back to the computer, followed by newline
    //Serial.println(sensorReading);


}
  delay(100);  // delay to avoid overloading the serial port buffer
 
  
}

void Blink(int time)
{
  for(int l=0; l<5; l++)
  {
   digitalWrite(13, HIGH);
    delay(time);
    digitalWrite(13, LOW);
    delay(time);}
}


